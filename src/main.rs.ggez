//! The simplest possible example that does something.
#![allow(clippy::unnecessary_wraps)]

static WINDOW_TITLE: &str = "Torri di Hanoi";
const SCREEN_WIDTH: f32 = 1280.0;
const SCREEN_HEIGHT: f32 = 720.0;
const RECT_WIDTH: f32 = 100.0;
const RECT_HEIGHT: f32 = 100.0;
const RECT_WIDTH_HALF: f32 = RECT_WIDTH / 2.0;
const RECT_HEIGHT_HALF: f32 = RECT_HEIGHT / 2.0;
const PERNO_WIDTH: f32 = 20.0;
const PERNO_HEIGHT: f32 = 500.0;
const PERNO_WIDTH_HALF: f32 = PERNO_WIDTH / 2.0;
const PERNO_HEIGHT_HALF: f32 = PERNO_HEIGHT / 2.0;
const PERNO_A_X: f32 = SCREEN_WIDTH / 4.0;
const PERNO_B_X: f32 = SCREEN_WIDTH - SCREEN_WIDTH / 4.0;
const BASE: f32 = SCREEN_HEIGHT - 100.0;

use ggez::event::{self, Axis, Button, GamepadId, MouseButton};
use ggez::{
    conf,
    glam::*,
    graphics::{self, Color, DrawParam},
    Context, GameResult,
};

fn position_in_rect(
    x: f32,
    y: f32,
    rect_pos_x: f32,
    rect_pos_y: f32,
    rect_width: f32,
    rect_height: f32,
) -> bool {
    let rect_width_half = rect_width / 2.0;

    return (x >= rect_pos_x - rect_width_half)
        && (x <= rect_pos_x + rect_width_half)
        && (y >= rect_pos_y - rect_height)
        && (y <= rect_pos_y);
}

fn clamp_rect_position(
    pos_x: f32,
    pos_y: f32,
    rect_width: f32,
    rect_height: f32,
    screen_width: f32,
    screen_height: f32,
) -> (f32, f32) {
    let rect_width_half = rect_width / 2.0;
    let rect_height_half = rect_height / 2.0;
    let mut new_pos_x = pos_x;
    let mut new_pos_y = pos_y;

    if new_pos_x < rect_width_half {
        new_pos_x = rect_width_half;
    } else if new_pos_x > screen_width - rect_width_half {
        new_pos_x = screen_width - rect_width_half;
    }

    if new_pos_y < rect_height_half {
        new_pos_y = rect_height_half;
    } else if new_pos_y > screen_height - rect_height_half {
        new_pos_y = screen_height - rect_height_half;
    }

    (new_pos_x, new_pos_y)
}

struct MainState {
    pos_x: f32,
    pos_y: f32,
    mov_offset_x: f32,
    mov_offset_y: f32,
    moving_square: bool,
    rect: graphics::Mesh,
    perno: graphics::Mesh,
    frames: i32,
}

impl MainState {
    fn new(ctx: &mut Context) -> GameResult<MainState> {
        // Create rectangle
        let rect = graphics::Mesh::new_rectangle(
            ctx,
            graphics::DrawMode::fill(),
            graphics::Rect::new(-RECT_WIDTH_HALF, -RECT_HEIGHT, RECT_WIDTH, RECT_HEIGHT),
            Color::WHITE,
        )?;

        // Create perno
        let perno = graphics::Mesh::new_rectangle(
            ctx,
            graphics::DrawMode::fill(),
            graphics::Rect::new(-PERNO_WIDTH_HALF, -PERNO_HEIGHT, PERNO_WIDTH, PERNO_HEIGHT),
            Color::from_rgb(80, 80, 0),
        )?;

        Ok(MainState {
            pos_x: PERNO_A_X,
            pos_y: BASE,
            mov_offset_x: 0.0,
            mov_offset_y: 0.0,
            moving_square: false,
            rect,
            perno,
            frames: 0,
        })
    }
}

impl event::EventHandler<ggez::GameError> for MainState {
    fn update(&mut self, _ctx: &mut Context) -> GameResult {
        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult {
        // Create canvas
        let mut canvas =
            graphics::Canvas::from_frame(ctx, graphics::Color::from([0.1, 0.2, 0.3, 1.0]));

        // Draw rectangle
        canvas.draw(&self.perno, vec2(PERNO_A_X, BASE));
        canvas.draw(&self.perno, vec2(PERNO_B_X, BASE));

        canvas.draw(&self.rect, vec2(self.pos_x, self.pos_y));

        canvas.finish(ctx)?;

        if self.frames == 100 {
            println!("FPS: {}", ctx.time.fps());
            self.frames = 0;
        }

        self.frames += 1;

        Ok(())
    }

    fn mouse_button_down_event(
        &mut self,
        _ctx: &mut Context,
        button: MouseButton,
        x: f32,
        y: f32,
    ) -> GameResult {
        if position_in_rect(x, y, self.pos_x, self.pos_y, RECT_WIDTH, RECT_HEIGHT) {
            self.mov_offset_x = self.pos_x - x;
            self.mov_offset_y = self.pos_y - y;
            println!("Position in rect!");
            self.moving_square = true;
        }
        Ok(())
    }

    fn mouse_button_up_event(
        &mut self,
        _ctx: &mut Context,
        button: MouseButton,
        x: f32,
        y: f32,
    ) -> GameResult {
        if self.moving_square {
            self.moving_square = false;

            if self.pos_x < SCREEN_WIDTH / 2.0 {
                self.pos_x = PERNO_A_X;
            } else {
                self.pos_x = PERNO_B_X;
            }

            self.pos_y = BASE;
        }
        Ok(())
    }

    fn mouse_motion_event(
        &mut self,
        _ctx: &mut Context,
        x: f32,
        y: f32,
        _: f32,
        _: f32,
    ) -> GameResult {
        if self.moving_square {
            self.pos_x = x + self.mov_offset_x;
            self.pos_y = y + self.mov_offset_y;

            (self.pos_x, self.pos_y) = clamp_rect_position(
                x + self.mov_offset_x,
                y + self.mov_offset_y,
                RECT_WIDTH,
                RECT_HEIGHT,
                SCREEN_WIDTH,
                SCREEN_HEIGHT,
            )
        }
        Ok(())
    }
}

pub fn main() -> GameResult {
    let cb = ggez::ContextBuilder::new("hanoi", "carmisergio")
        .window_setup(conf::WindowSetup::default().title(WINDOW_TITLE))
        .window_mode(conf::WindowMode::default().dimensions(SCREEN_WIDTH, SCREEN_HEIGHT));
    let (mut ctx, event_loop) = cb.build()?;
    let state = MainState::new(&mut ctx)?;
    event::run(ctx, event_loop, state)
}
